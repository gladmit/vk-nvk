const typeOfWaterСonsumer = [[70, 0, 5.0, 0, 0.2, 50, 0.2, 50], [110, 0, 8.1, 0, 0.3, 300, 0.3, 300], [120, 0, 8.7, 0, 0.3, 300, 0.3, 300], [130, 50, 8.2, 4.5, 0.2, 100, 0.14, 60], [160, 65, 10.3, 5.7, 0.3, 300, 0.2, 200], [180, 70, 11.6, 6.5, 0.3, 300, 0.2, 200], [85, 45, 10.4, 5.4, 0.2, 100, 0.14, 60], [110, 50, 12.5, 7.0, 0.2, 100, 0.14, 60], [120, 70, 10.2, 6.38, 0.2, 100, 0.14, 60], [120, 60, 12.5, 7.0, 0.3, 300, 0.2, 200], [230, 120, 19, 10.2, 0.2, 115, 0.14, 80], [200, 85, 22.4, 8.8, 0.3, 250, 0.2, 180], [250, 130, 28, 12.8, 0.3, 280, 0.2, 190], [300, 160, 30, 13.6, 0.3, 300, 0.2, 200], [115, 65, 8.4, 4.6, 0.2, 100, 0.14, 60], [200, 75, 12, 6.55, 0.3, 300, 0.2, 200], [240, 95, 14, 8.1, 0.2, 200, 0.14, 120], [130, 55, 12.5, 7.0, 0.2, 100, 0.14, 60], [150, 65, 12.5, 7.0, 0.2, 100, 0.14, 60], [200, 100, 10, 4.2, 0.3, 300, 0.2, 200], [13, 4.4, 2.6, 1.0, 0.2, 80, 0.14, 60], [22, 10, 9.5, 3.8, 0.14, 100, 0.1, 60], [60, 21, 18, 6.8, 0.2, 100, 0.14, 60], [40, 20, 10, 3.8, 0.14, 100, 0.1, 60], [90, 25, 18, 6.8, 0.2, 100, 0.14, 60], [75, 21.3, 75, 21.3, 0.3, 300, 0.2, 200], [40, 12.8, 40, 12.8, 0.3, 300, 0.2, 200], [12, 4.5, 4, 1.7, 0.14, 80, 0.1, 60], [17.2, 5.0, 2.7, 1.0, 0.14, 100, 0.1, 60], [220, 95, 43.2, 18.4, 0.2, 200, 0.2, 200], [16, 5.0, 3.5, 1.2, 0.14, 100, 0.1, 60], [12, 2.9, 3.1, 0.85, 0.14, 100, 0.1, 60], [9, 2.7, 3.1, 0.85, 0.14, 100, 0.1, 60], [12, 4, 4, 1.7, 0.14, 60, 0.1, 40], [310, 47, 32, 7.0, 0.2, 300, 0.2, 200], [12, 3.4, 12, 3.4, 0.3, 300, 0.2, 200], [10, 2.6, 10, 2.6, 0.3, 300, 0.2, 200], [2, 0.8, 2, 0.8, 0.3, 300, 0.2, 200], [250, 55, 37, 8.2, 0.3, 300, 0.2, 200], [12, 4, 4, 1.7, 0.14, 80, 0.1, 60], [56, 28, 9, 4, 0.14, 60, 0.1, 40], [4, 1.3, 0.5, 0.17, 0.14, 80, 0.1, 50], [8.6, 2.2, 0.9, 0.34, 0.14, 80, 0.1, 50], [10, 4, 0.9, 0.26, 0.14, 60, 0.1, 40], [40, 21, 3.4, 1.9, 0.14, 80, 0.1, 50], [3, 0.85, 0.3, 0.85, 0.14, 60, 0.1, 40], [50, 25, 50, 25, 0.2, 80, 0.14, 50], [100, 51, 100, 51, 0.2, 80, 0.14, 50], ['10% вмест. бассейна', 0, 0, 0, 0, 0, 0, 0], [3, 0.85, 0.3, 0.09, 0.14, 60, 0.1, 40], [100, 51, 100, 51, 0.2, 80, 0.2, 50], [180, 100, 180, 100, 0.4, 180, 0.4, 120], [290, 160, 290, 160, 0.4, 290, 0.4, 190], [360, 200, 360, 200, 0.2, 360, 0.14, 240], [540, 300, 540, 300, 0.3, 540, 0.2, 360], [500,230, 500, 230, 0.2, 500, 0.14, 270], [45, 20.4, 14.1, 7.1, 0.14, 60, 0.1, 40], [25, 9.4, 9.4, 3.7, 0.14, 60, 0.1, 40], [3], [0.5], [1.5], [0.4], [3], [0.5]];

const ahrFind = [[0, 200], [15, 202], [16, 205], [17, 207], [18, 210], [19, 212], [20, 215], [21, 217], [22, 219], [23, 222], [24, 224], [25, 226], [26, 228], [27, 230], [28, 233], [29, 235], [30, 237], [31, 239], [32, 241], [33, 243], [34, 245], [35, 247], [36, 249], [37, 250], [38, 252], [39, 254], [40, 256], [41, 258], [42, 259], [43, 261], [44, 263], [45, 265], [46, 266], [47, 268], [48, 270], [49, 271], [50, 273], [52, 276], [54, 280], [56, 283], [58, 286], [60, 289], [62, 292], [64, 295], [66, 298], [68, 301], [70, 304], [72, 307], [74, 309], [76, 312], [78, 315], [80, 318], [82, 320], [84, 323], [86, 326], [88, 328], [90, 331], [92, 333], [94, 336], [96, 338], [98, 341], [100, 343], [105, 349], [110, 355],  [115, 361],  [120, 367],  [125, 373],  [130, 378],  [135, 384],  [140, 389],  [145, 394],  [150, 399],  [155, 405],  [160, 410], [165, 415],  [170, 420],  [175, 425],  [180, 430],  [185, 435],  [190, 439],  [195, 444], [200, 449], [ 210, 458], [ 220, 467], [ 230, 476], [ 240, 485], [ 250, 493], [ 260, 502], [ 270, 510], [ 280, 518], [ 290, 526], [ 300, 534], [ 310, 542], [ 320, 550], [ 330, 558], [ 340, 565], [ 350, 573], [ 360, 580], [ 370, 588], [ 380, 595], [ 390, 602], [ 400, 610], [ 410, 617], [ 420, 624], [ 430, 631], [ 440, 638], [ 450, 645], [ 460, 652], [ 470, 658], [ 480, 665], [ 490, 672], [ 500, 678], [ 520, 692], [ 540, 704], [ 560, 717], [ 580, 730], [ 600, 742], [ 620, 755], [ 640, 767], [ 660, 779], [ 680, 791], [ 700, 803], [ 720, 815], [ 740, 826], [ 760, 838], [ 780, 849], [ 800, 860], [ 820, 872], [ 840, 883], [ 860, 894], [ 880, 905], [ 900, 916], [ 920, 927], [ 940, 937], [ 960, 948], [ 980, 959], [ 1000, 969], [ 1050, 995], [ 1100, 1021], [ 1150, 1046], [ 1200, 1071], [ 1250, 1096], [ 1300, 1120], [ 1350, 1144], [ 1400, 1168], [ 1450, 1191], [ 1500, 1215], [ 1550, 1238], [ 1600, 1261], [ 1650, 1283], [ 1700, 1306], [ 1750, 1328], [ 1800, 1350], [ 1850, 1372], [ 1900, 1394], [ 1950, 1416], [ 2000, 1437], [ 2100, 1479], [ 2200, 1521], [ 2300, 1563], [ 2400, 1604], [ 2500, 1644], [ 2600, 1684], [ 2700, 1724], [ 2800, 1763], [ 2900, 1802], [ 3000, 1840], [ 3100, 1879], [ 3200, 1917], [ 3300, 1954], [ 3400, 1991], [ 3500, 2029], [ 3600, 2065], [ 3700, 2102], [ 3800, 2138], [ 3900, 2174], [ 4000, 2210], [ 4100, 2246], [ 4200, 2281], [ 4300, 2317], [ 4400, 2352], [ 4500, 2386], [ 4600, 2421], [ 4700, 2456], [ 4800, 2490], [ 4900, 2524], [ 5000, 2558], [ 5100, 2592], [ 5200, 2626], [ 5300, 2660], [ 5400, 2693], [ 5500, 2726], [ 5600, 2760], [ 5700, 2793], [ 5800, 2826], [ 5900, 2858], [ 6000, 2891], [ 6100, 2924], [ 6200, 2956], [ 6300, 2989], [ 6400, 3021], [ 6500, 3053], [ 6600, 3085], [ 6700, 3117], [ 6800, 3149], [ 6900, 3181], [ 7000, 3212], [ 7100, 3244], [ 7200, 3275], [ 7300, 3307], [ 7400, 3338], [ 7500, 3369], [ 7600, 3400], [ 7700, 3431], [ 7800, 3462], [ 7900, 3493], [ 8000, 3524], [ 8100, 3555], [ 8200, 3585], [ 8300, 3616], [ 8400, 3646], [ 8500, 3677], [ 8600, 3707], [ 8700, 3738], [ 8800, 3768], [ 8900, 3798], [ 9000, 3828], [ 9100, 3858], [ 9200, 3888], [ 9300, 3918], [ 9400, 3948], [ 9500, 3978], [ 9600, 4008], [ 9700, 4037], [ 9800, 4067], [ 9900, 4097], [ 10000, 4126], [ 10200, 4185 ], [ 10400, 4244 ], [ 10600, 4302 ], [ 10800, 4361 ], [ 11000, 4419 ], [ 11200, 4477 ],[ 11400, 4534 ], [ 11600, 4592 ], [ 11800, 4649 ], [ 12000, 4707 ], [ 12200, 4764 ], [ 12400, 4820 ], [ 12600, 4877 ], [ 12800, 4934 ], [ 13000, 4990 ], [ 13200, 5047 ], [ 13400, 5103 ], [ 13600, 5159 ], [ 13800, 5215 ], [ 14000, 5270 ], [ 14200, 5326 ], [ 14400, 5382 ], [ 14600, 5437 ], [ 14800, 5492 ], [ 15000, 5547 ], [ 15200, 5602 ], [ 15400, 5657 ], [ 15600, 5712 ], [ 16200, 5867 ], [ 16400, 5930 ], [ 16600, 5984 ], [ 16800, 6039 ], [ 17000, 6093 ], [ 17200, 6147 ], [ 17400, 6201 ], [ 17600, 6254 ], [ 17800, 6308 ], [ 18000, 6362 ], [ 18200, 6415 ], [ 18400, 6469 ], [ 18600, 6522 ], [ 18800, 6575 ], [ 19000, 6629 ], [ 19200, 6682 ], [ 19400, 6734 ], [ 19600, 6788 ], [ 19800, 6840 ], [ 20000, 6893 ], [ 21000, 7156 ], [ 21500, 7287 ], [ 22000, 7417 ], [ 22500, 7547 ], [ 23000, 7677 ], [ 23500, 7806 ], [ 24000, 7935 ], [ 24500, 8064 ], [ 25000, 8192 ], [ 25500, 8320 ], [ 26000, 8447 ], [ 26500, 8575 ], [ 27000, 8701 ], [ 27500, 8828 ], [ 28000, 8955 ], [ 28500, 9081 ], [ 29000, 9207 ], [ 29500, 9332 ], [ 30000, 9457 ], [ 30500, 9583 ], [ 31000, 9707 ], [ 31500, 9832 ], [ 32000, 9957 ], [ 32500, 10080 ], [ 33000, 10200 ], [ 33500, 10330 ], [ 34000, 10450 ], [ 34500, 10580 ], [ 35000, 10700 ], [ 35500, 10820 ], [ 36000, 10940 ], [ 36500, 11070 ], [ 37500, 11310 ], [ 38000, 11430 ], [ 38500, 11560 ], [ 39000, 11680 ], [ 39500, 11800 ], [ 40000, 11920 ], [ 40500, 12040 ], [ 41000, 12160 ], [ 41500, 12280 ], [ 42000, 12410 ], [ 42500, 12530 ], [ 43000, 12650 ], [ 43500, 12770 ], [ 44000, 12890 ], [ 44500, 13010 ], [ 45000, 13130 ], [ 45500, 13250 ], [ 46000, 13370 ], [ 46500, 13490 ], [ 47000, 13610 ], [ 47500, 13730 ], [ 48000, 13850 ], [ 48500, 13970 ], [ 49000, 14090 ], [ 49500, 14200 ], [ 50000, 14320 ], [ 51000, 14560 ], [ 52000, 14800 ], [ 53000, 15040 ], [ 54000, 15270 ], [ 55000, 15510 ], [ 56000, 15740 ], [ 57000, 15980 ], [ 58000, 16220 ], [ 59000, 16450 ], [ 60000, 16690 ], [ 61000, 16920 ], [ 62000, 17150 ], [ 63000, 17390 ], [ 64000, 17620 ], [ 65000, 17850 ], [ 66000, 18090 ], [ 67000, 18320 ], [ 68000, 18550 ], [ 69000, 18790 ], [ 70000, 19020 ], [ 71000, 19250 ], [ 72000, 19480 ], [ 73000, 19710 ], [ 74000, 19940 ], [ 75000, 20180 ], [ 76000, 20410 ], [ 77000, 20640 ], [ 78000, 20870 ], [ 79000, 21100 ], [ 80000, 21330 ], [ 81000, 21560 ], [ 82000, 21690 ], [ 83000, 22020 ], [ 85000, 22480 ], [ 86000, 22710 ], [ 87000, 22940 ], [ 88000, 23170 ], [ 89000, 23390 ], [ 90000, 23620 ], [ 91000, 23850 ], [ 92000, 24080 ], [ 93000, 24310 ], [ 94000, 2545 ], [ 95000, 2477 ], [ 96000, 24990 ], [ 97000, 25220 ], [ 98000, 25450 ], [ 99000, 25680 ], [ 100000, 25910 ], [ 102000, 26360 ], [ 104000, 26820 ], [ 106000, 27270 ], [ 108000, 27720 ], [ 110000, 28180 ], [ 112000, 28630 ], [ 114000, 29090 ], [ 116000, 29540 ], [ 118000, 29890 ], [ 120000, 30440 ], [ 122000, 30900 ], [ 124000, 31350 ], [ 126000, 31800 ], [ 128000, 32250 ], [ 130000, 32700 ], [ 132000, 33150 ], [ 134000, 33600 ], [ 136000, 34060 ], [ 138000, 34510 ], [ 140000, 34960 ], [ 142000, 35410 ], [ 144000, 35860 ], [ 146000, 36310 ], [ 148000, 36760 ], [ 150000, 37210 ], [ 152000, 37660 ], [ 154000, 38110 ], [ 158000, 39010 ], [ 160000, 39460 ], [ 162000, 39910 ], [ 164000, 40350 ], [ 166000, 40800 ], [ 168000, 41250 ], [ 170000, 41700 ], [ 172000, 42150 ], [ 174000, 42600 ], [ 176000, 43050 ], [ 178000, 43500 ], [ 180000, 43950 ], [ 182000, 44400 ], [ 184000, 44840 ], [ 186000, 45290 ], [ 188000, 45740 ], [ 190000, 46190 ], [ 192000, 46640 ], [ 194000, 47090 ], [ 196000, 47540 ], [ 198000, 47990 ], [ 200000, 48430 ], [ 205000, 49490 ], [ 210000, 50590 ], [ 215000, 51700 ], [ 220000, 52800 ], [ 225000, 53900 ], [ 230000, 55000 ], [ 235000, 56100 ], [ 240000, 57190 ], [ 245000, 58290 ], [ 250000, 59380 ], [ 255000, 60480 ], [ 260000, 61570 ], [ 265000, 62660 ], [ 270000, 63750 ], [ 275000, 64850 ], [ 280000, 65940 ], [ 285000, 67030 ], [ 290000, 68120 ], [ 295000, 69200 ], [ 300000, 70290 ], [ 305000, 71380 ], [ 315000, 73550 ], [ 320000, 74630 ], [ 325000, 75720 ], [ 330000, 76800 ], [ 335000, 77880 ], [ 340000, 78960 ], [ 345000, 80040 ], [ 350000, 81120 ], [ 355000, 82200 ], [ 360000, 83280 ], [ 365000, 84360 ], [ 370000, 85440 ], [ 375000, 86520 ], [ 380000, 87600 ], [ 385000, 88670 ], [ 390000, 89750 ], [ 395000, 90820 ], [ 400000, 91900 ], [ 405000, 92970 ], [ 410000, 94050 ], [ 415000, 95120 ], [ 420000, 96200 ], [ 425000, 97270 ], [ 430000, 98340 ], [ 435000, 99410 ], [ 440000, 100490 ], [ 445000, 101560 ], [ 450000, 102630 ], [ 455000, 103700 ], [ 460000, 104770 ], [ 465000, 105840 ], [ 470000, 106910 ], [ 475000, 107980 ], [ 480000, 109050 ], [ 485000, 110110 ], [ 490000, 111180 ], [ 495000, 112250 ], [ 500000, 113320 ], [ 505000, 114380 ], [ 510000, 115450 ], [ 515000, 116520 ], [ 520000, 117580 ], [ 525000, 118650 ], [ 535000, 120780 ], [ 540000, 121840 ], [ 545000, 122910 ], [ 550000, 123970 ], [ 555000, 125040 ], [ 560000, 126100 ], [ 565000, 127160 ], [ 570000, 128220 ], [ 575000, 129290 ], [ 580000, 130350 ], [ 585000, 131410 ], [ 590000, 132470 ], [ 595000, 133540 ], [ 600000, 134600 ], [ 605000, 135660 ], [ 610000, 136720 ], [ 615000, 137780 ], [ 620000, 138840 ], [ 625000, 139900 ], [ 630000, 140960 ], [ 635000, 142020 ], [ 640000, 143080 ], [ 645000, 144140 ], [ 650000, 145200 ], [ 655000, 146250 ], [ 660000, 147310 ], [ 665000, 148370 ], [ 670000, 149430 ], [ 675000, 150490 ], [ 685000, 152600 ], [ 690000, 153660 ], [ 695000, 154720 ], [ 700000, 155770 ], [ 705000, 156830 ], [ 710000, 157890 ], [ 715000, 158940 ], [ 720000, 160000 ], [ 725000, 161060 ], [ 730000, 162110 ], [ 735000, 163170 ], [ 740000, 164220 ], [ 745000, 165280 ], [ 755000, 167390 ], [ 760000, 168440 ], [ 765000, 169500 ], [ 770000, 170550 ], [ 775000, 171600 ], [ 780000, 172660 ], [ 785000, 173710 ], [ 790000, 174760 ], [ 795000, 175820 ], [ 800000, 176870 ], [ 810000, 178980 ], [ 820000, 181080 ], [ 830000, 183190 ], [ 840000, 185290 ], [ 850000, 187390 ], [ 860000, 189490 ], [ 870000, 191600 ], [ 880000, 193700 ], [ 890000, 195700 ], [ 900000, 197900 ], [ 910000, 200000 ], [ 920000, 202100 ], [ 930000, 204200 ], [ 940000, 206300 ], [ 950000, 208390 ], [ 960000, 210490 ], [ 970000, 212590 ], [ 980000, 214680 ], [ 990000, 216780 ], [ 1000000, 218870 ], [ 1250000, 271140 ], [ 1600000, 343900 ], [ 2000000, 426800 ]];

function balanceCalculation(potrebiteli) {
    let output = [];       
    for (let j = 0; j < potrebiteli.length; j++) {
    output.push([]);     
    let numberOfPeople = potrebiteli[j][1];
    let input = potrebiteli[j][0];
    let QSut = numberOfPeople * typeOfWaterСonsumer[input][0] / 1000; // общий суточный расход
    output[j].push(QSut.toFixed(2));
    let NPhr = 1000*numberOfPeople*typeOfWaterСonsumer[input][2]/typeOfWaterСonsumer[input][5]; // вероятность часовая для общего расхода
    
    let ahr = []; // альфа часовая
    
        for (let i = 0; i < ahrFind.length; i++) {
            if (NPhr > ahrFind[i][0] && NPhr < ahrFind[i+1][0] ) {
              let deltaNPhr = (NPhr - ahrFind[i][0])/(ahrFind[i+1][0] - ahrFind[i][0]);
              ahr.push((ahrFind[i+1][1] - ahrFind[i][1])*deltaNPhr + ahrFind[i][1]);
            }
            if (NPhr === ahrFind[i][0]) {
              ahr.push(ahrFind[i][1])  
            }            
        }
        
    let Qhr = 5*typeOfWaterСonsumer[input][5]*ahr[0]/1000; //расход общий часовой (коэффициент 0.005 умножен на 1000)    
    output[j].push((Qhr/1000).toFixed(2));

    let NP = 1000*numberOfPeople*typeOfWaterСonsumer[input][2]/(typeOfWaterСonsumer[input][4]*3600); // вероятность секундная общего расхода
    
    let a = []; // альфа секундная общая

        for (let i = 0; i < ahrFind.length; i++) {
            if (NP > ahrFind[i][0] && NP < ahrFind[i+1][0] ) {
            let deltaNP = (NP - ahrFind[i][0])/(ahrFind[i+1][0] - ahrFind[i][0]);
            a.push((ahrFind[i+1][1] - ahrFind[i][1])*deltaNP + ahrFind[i][1]);
            }
            if (NP === ahrFind[i][0]) {
            a.push(ahrFind[i][1])  
            }            
        }      

    let Q = 5 * typeOfWaterСonsumer[input][4] * a; // расход общий секундный
    output[j].push((Q/1000).toFixed(2));
    
    let QSutHot = numberOfPeople * typeOfWaterСonsumer[input][1]/1000; // расход суточный горячей воды
    output[j].push((QSutHot).toFixed(2));

    let NPhrHot = 1000 * numberOfPeople * typeOfWaterСonsumer[input][3]/typeOfWaterСonsumer[input][7]; // вероятность часовая горячей воды
    let ahrHot = []; // альфа часовая горячей воды
    
    for (let i = 0; i < ahrFind.length; i++) {
        if (NPhrHot > ahrFind[i][0] && NPhrHot < ahrFind[i+1][0] ) {
        let deltaNPhrHot = (NPhrHot - ahrFind[i][0])/(ahrFind[i+1][0] - ahrFind[i][0]);
        ahrHot.push((ahrFind[i+1][1] - ahrFind[i][1])*deltaNPhrHot + ahrFind[i][1]);
        }
        if (NPhrHot === ahrFind[i][0]) {
        ahrHot.push(ahrFind[i][1])  
        }            
    }      

    let QhrHot = 5 * typeOfWaterСonsumer[input][7] * ahrHot[0]/1000; // расход часовой горячей воды (коэффициент 0.005 умножен на 1000)
    output[j].push((QhrHot/1000).toFixed(2));

    let NPHot = 1000 * numberOfPeople*typeOfWaterСonsumer[input][3]/(typeOfWaterСonsumer[input][6]*3600); // вероятность секундная расхода горячей воды
    
    let aHot = []; // альфа секундная горячей воды

        for (let i = 0; i < ahrFind.length; i++) {
            if (NPHot > ahrFind[i][0] && NPHot < ahrFind[i+1][0] ) {
            let deltaNPHot = (NPHot - ahrFind[i][0])/(ahrFind[i+1][0] - ahrFind[i][0]);
            aHot.push((ahrFind[i+1][1] - ahrFind[i][1])*deltaNPHot + ahrFind[i][1]);
            }
            if (NPHot === ahrFind[i][0]) {
            aHot.push(ahrFind[i][1])  
            }            
        }      

    let QHot = 5 * typeOfWaterСonsumer[input][6] * aHot; // расход секундный горячей воды
    output[j].push((QHot/1000).toFixed(2));
    
    }

    return output;
}

console.log(balanceCalculation([[1, 100], [10, 1000], [10, 1000]]));